/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityList;
import model.Community;
import model.House;
import model.Person;
import model.System;

/**
 *
 * @author gunasekhar
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SeachJPanel
     */
    
    private JPanel displayJpanel;
    private System system;
    private City city;
    private Community community;
    
    
    public SearchJPanel(JPanel displayJpanel, System system) {
        this.displayJpanel = displayJpanel;
        this.system = system;
        initComponents();
        initializeCities();
        initializeCommunities();
    }
    
    private void initializeCities() {
        
        List<City> cities = system.getCities();
        for(City city:cities){
            cityJComboBox.addItem(city.getCityName());
        }
    }
    
    private void initializeCommunities() {
        communityJComboBox.removeAllItems();
        String selectedCityName = (String) cityJComboBox.getSelectedItem();
        for(City city : system.getCities()) {
            if(city.getCityName().equalsIgnoreCase(selectedCityName)){
                this.city = city;                
                for(Community community : city.getCommunities()){
                    communityJComboBox.addItem(community.getCommunityName());
                    
                }
            }
        }
        initializeHouses();
    }
    
    private void initializeHouses() {
        houseJComboBox.removeAllItems();
        String selectedCommunityName = (String) communityJComboBox.getSelectedItem();
        for(Community community : this.city.getCommunities()) {
            if(community.getCommunityName().equalsIgnoreCase(selectedCommunityName)){
                this.community = community;
                
                for(House house : community.getHouses()){
                    houseJComboBox.addItem(house.getHouseName());
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblchoosecity = new javax.swing.JLabel();
        cityJComboBox = new javax.swing.JComboBox<>();
        btnnext = new javax.swing.JButton();
        lblcommunity = new javax.swing.JLabel();
        communityJComboBox = new javax.swing.JComboBox<>();
        lblhouse = new javax.swing.JLabel();
        houseJComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblstandardBPvalues = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblabnormalpatients = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        lblchoosecity.setText("City :");

        cityJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityJComboBoxActionPerformed(evt);
            }
        });

        btnnext.setText("Next");
        btnnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnextActionPerformed(evt);
            }
        });

        lblcommunity.setText("Community :");

        communityJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityJComboBoxActionPerformed(evt);
            }
        });

        lblhouse.setText("House :");

        houseJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseJComboBoxActionPerformed(evt);
            }
        });

        tblstandardBPvalues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"21-25", "122.5 - 118.5", "80.5 - 76.5", null, "21-25", "117.5 - 113.5", "72.5 - 68.5"},
                {"26-30", "121.5 - 117.5", "78.5 - 74.5", null, "26-30", "115.5 - 111.5", "73.5 - 69.5"},
                {"31-35", "116.5 - 112.5", "77.5 - 73.5", null, "31-35", "112.5 - 108.5", "74.5 - 70.5"},
                {"36-40", "122.5 - 118.5", "77.5 - 73.5", null, "36-40", "114.5 - 110.5", "76.5 - 72.5"},
                {"41-45", "117.5 - 113.5", "80.5 - 76.5", null, "41-45", "118.5 - 114.5", "75.5 - 71.5"},
                {"46-50", "121.5 - 117.5", "82.5 - 78.5", null, "46-50", "126 - 122", "80.5 - 76.5"},
                {"51-55", "127.5 - 123.5", "82.5 - 78.5", null, "51-55", "124.5 - 120.5", "76.5 - 72.5"},
                {"56-60", "131.5 - 127.5", "81.5 - 77.5", null, "56-60", "134.5 - 130.5", "80.5 - 76.5"},
                {"61-65", "145.5 - 141.5", "78.5 - 74.5", null, "61-65", "132.5 - 128.5", "79.5 - 75.5"}
            },
            new String [] {
                "Male Age Range", "Systolic BP range", "Diastolic BP range", "", "Female Age Range", "Systolic BP range", "Diastolic BP range"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblstandardBPvalues);
        if (tblstandardBPvalues.getColumnModel().getColumnCount() > 0) {
            tblstandardBPvalues.getColumnModel().getColumn(3).setPreferredWidth(5);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("People With Abnormal Blood Pressure");

        tblabnormalpatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "City", "Community", "House", "Person", "Age", "Systole BP", "Diastole BP"
            }
        ));
        jScrollPane2.setViewportView(tblabnormalpatients);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Standard Blood Pressure Values");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblchoosecity, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(communityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addComponent(lblhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(houseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnnext))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblchoosecity, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblcommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(houseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnext))
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnextActionPerformed
        String selectedCityName = (String) cityJComboBox.getSelectedItem();
        String selectedCommunityName = (String) communityJComboBox.getSelectedItem();
        String selectedHouseName = (String) houseJComboBox.getSelectedItem();
        City selectedCity = null;
        Community selectedCommunity = null;
        House selectedHouse = null;
        for (City city : system.getCities()){
            if (city.getCityName().equalsIgnoreCase(selectedCityName)){
                 selectedCity = city;
            }
        }      
        for (Community community : selectedCity.getCommunities()){
            if (community.getCommunityName().equalsIgnoreCase(selectedCommunityName)){
                selectedCommunity = community;
            }
        }
        
        for (House house : selectedCommunity.getHouses()){
            if (house.getHouseName().equalsIgnoreCase(selectedHouseName)){
                selectedHouse = house;
            }
        }
        
        double msbp=0;
        double mdbp=0;
        
        double fsbp=0;
        double fdbp=0;
        
        DefaultTableModel model = (DefaultTableModel) tblabnormalpatients.getModel();
        model.setRowCount(0);
        
        for (Person person : selectedHouse.getPersons()){
            if (person.getGender().equals("Male")){
                for(int i=0; i<person.getPatient().getEncounterHistory().getEncounters().size(); i++){
                    msbp = person.getPatient().getEncounterHistory().getEncounters().get(i).getVitalSigns().getBloodPressureSystolic();
                    mdbp = person.getPatient().getEncounterHistory().getEncounters().get(i).getVitalSigns().getBloodPressureDiastolic();
                    
                    if (isAbnormalMale(person, msbp, mdbp)){
                        Object[] row = new Object[7];
                        row[0]=selectedCityName;
                        row[1]=selectedCommunityName;
                        row[2]=selectedHouseName;
                        row[3]=person;
                        row[4]=person.getGender();
                        row[5]=msbp;
                        row[6]=mdbp;

                        model.addRow(row);
                    }
                }
            }
            else if (person.getGender().equals("Female")){
                for(int i=0; i<person.getPatient().getEncounterHistory().getEncounters().size(); i++){
                    msbp = person.getPatient().getEncounterHistory().getEncounters().get(i).getVitalSigns().getBloodPressureSystolic();
                    mdbp = person.getPatient().getEncounterHistory().getEncounters().get(i).getVitalSigns().getBloodPressureDiastolic();
                    
                    if (isAbnormalFemale(person, msbp, mdbp)){
                        Object[] row = new Object[7];
                        row[0]=selectedCityName;
                        row[1]=selectedCommunityName;
                        row[2]=selectedHouseName;
                        row[3]=person;
                        row[4]=person.getGender();
                        row[5]=msbp;
                        row[6]=mdbp;

                        model.addRow(row);
                    }
                }
            }
        }

    }//GEN-LAST:event_btnnextActionPerformed

    private boolean isAbnormalMale(Person person, double syst, double diab){
        
        if(Double.compare(person.getAge(),21) < 0 || Double.compare(person.getAge(),65) > 0){
            return false;
        }
        if(Double.compare(person.getAge(),21) >= 0 && Double.compare(person.getAge(),25) <= 0){
            if(Double.compare(syst,122.5) < 0 && Double.compare(syst,118.5) > 0 && Double.compare(diab,80.5) < 0 && Double.compare(diab,76.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),26) >= 0 && Double.compare(person.getAge(),30) <= 0){
            if(Double.compare(syst,121.5) < 0 && Double.compare(syst,117.5) > 0 && Double.compare(diab,78.5) < 0 && Double.compare(diab,74.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),31) >= 0 && Double.compare(person.getAge(),35) <= 0){
            if(Double.compare(syst,116.5) < 0 && Double.compare(syst,112.5) > 0 && Double.compare(diab,77.5) < 0 && Double.compare(diab,73.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),36) >= 0 && Double.compare(person.getAge(),40) <= 0){
            if(Double.compare(syst,122.5) < 0 && Double.compare(syst,118.5) > 0 && Double.compare(diab,77.5) < 0 && Double.compare(diab,73.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),41) >= 0 && Double.compare(person.getAge(),45) <= 0){
            if(Double.compare(syst,117.5) < 0 && Double.compare(syst,113.5) > 0 && Double.compare(diab,80.5) < 0 && Double.compare(diab,76.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),46) >= 0 && Double.compare(person.getAge(),50) <= 0){
            if(Double.compare(syst,121.5) < 0 && Double.compare(syst,117.5) > 0 && Double.compare(diab,82.5) < 0 && Double.compare(diab,78.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),51) >= 0 && Double.compare(person.getAge(),55) <= 0){
            if(Double.compare(syst,127.5) < 0 && Double.compare(syst,123.5) > 0 && Double.compare(diab,82.5) < 0 && Double.compare(diab,78.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),56) >= 0 && Double.compare(person.getAge(),60) <= 0){
            if(Double.compare(syst,131.5) < 0 && Double.compare(syst,127.5) > 0 && Double.compare(diab,81.5) < 0 && Double.compare(diab,77.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),61) >= 0 && Double.compare(person.getAge(),65) <= 0){
            if(Double.compare(syst,145.5) < 0 && Double.compare(syst,141.5) > 0 && Double.compare(diab,78.5) < 0 && Double.compare(diab,74.5) > 0){
                return false;
            }else{
                return true;
            }
        }return false;
    }
    
    private boolean isAbnormalFemale(Person person, double syst, double diab){
        
        if(Double.compare(person.getAge(),21) < 0 || Double.compare(person.getAge(),65) > 0){
            return false;
        }

        if(Double.compare(person.getAge(),21) >= 0 && Double.compare(person.getAge(),25) <= 0){
            if(Double.compare(syst,117.5) < 0 && Double.compare(syst,113.5) > 0 && Double.compare(diab,72.5) < 0 && Double.compare(diab,68.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),26) >= 0 && Double.compare(person.getAge(),30) <= 0){
            if(Double.compare(syst,115.5) < 0 && Double.compare(syst,111.5) > 0 && Double.compare(diab,73.5) < 0 && Double.compare(diab,69.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),31) >= 0 && Double.compare(person.getAge(),35) <= 0){
            if(Double.compare(syst,113.5) < 0 && Double.compare(syst,108.5) > 0 && Double.compare(diab,74.5) < 0 && Double.compare(diab,70.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),36) >= 0 && Double.compare(person.getAge(),40) <= 0){
            if(Double.compare(syst,114.5) < 0 && Double.compare(syst,110.5) > 0 && Double.compare(diab,76.5) < 0 && Double.compare(diab,72.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),41) >= 0 && Double.compare(person.getAge(),45) <= 0){
            if(Double.compare(syst,118.5) < 0 && Double.compare(syst,114.5) > 0 && Double.compare(diab,75.5) < 0 && Double.compare(diab,71.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),46) >= 0 && Double.compare(person.getAge(),50) <= 0){
            if(Double.compare(syst,126.0) < 0 && Double.compare(syst,122.5) > 0 && Double.compare(diab,80.5) < 0 && Double.compare(diab,76.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),51) >= 0 && Double.compare(person.getAge(),55) <= 0){
            if(Double.compare(syst,124.5) < 0 && Double.compare(syst,120.5) > 0 && Double.compare(diab,76.5) < 0 && Double.compare(diab,72.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),56) >= 0 && Double.compare(person.getAge(),60) <= 0){
            if(Double.compare(syst,134.5) < 0 && Double.compare(syst,130.5) > 0 && Double.compare(diab,80.5) < 0 && Double.compare(diab,76.5) > 0){
                return false;
            }else{
                return true;
            }
        }

        if(Double.compare(person.getAge(),61) >= 0 && Double.compare(person.getAge(),65) <= 0){
            if(Double.compare(syst,132.5) < 0 && Double.compare(syst,128.5) > 0 && Double.compare(diab,79.5) < 0 && Double.compare(diab,75.5) > 0){
                return false;
            }else{
                return true;
            }
        }return false;
    }
    
    
    private void communityJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityJComboBoxActionPerformed
        initializeHouses();
    }//GEN-LAST:event_communityJComboBoxActionPerformed

    private void houseJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_houseJComboBoxActionPerformed

    private void cityJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityJComboBoxActionPerformed
        initializeCommunities();
    }//GEN-LAST:event_cityJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnnext;
    private javax.swing.JComboBox<String> cityJComboBox;
    private javax.swing.JComboBox<String> communityJComboBox;
    private javax.swing.JComboBox<String> houseJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblchoosecity;
    private javax.swing.JLabel lblcommunity;
    private javax.swing.JLabel lblhouse;
    private javax.swing.JTable tblabnormalpatients;
    private javax.swing.JTable tblstandardBPvalues;
    // End of variables declaration//GEN-END:variables
}
